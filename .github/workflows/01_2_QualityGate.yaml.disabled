name: 01_2_Quality Gate

on:
  workflow_call

env:
  NODE_VERSION: '20'

jobs:
  Quality_Backend:
    name: 🔍 SonarQube Backend Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'
          
      - name: 📥 Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: api/coverage/
          
      - name: 🔍 SonarQube Scan Backend
        uses: sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: api/.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  Quality_Frontend:
    name: 🔍 SonarQube Frontend Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
          
      - name: 🔍 SonarQube Scan Frontend
        uses: sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: frontend/.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  Quality_Summary:
    name: 📋 Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [Quality_Backend, Quality_Frontend]
    if: always()
    
    steps:
      - name: 📋 Quality Results
        run: |
          echo "🔍 Backend Quality: ${{ needs.Quality_Backend.result }}"
          echo "🔍 Frontend Quality: ${{ needs.Quality_Frontend.result }}"
          
          if [[ "${{ needs.Quality_Backend.result }}" == "success" && 
                "${{ needs.Quality_Frontend.result }}" == "success" ]]; then
            echo "✅ Quality Gate PASSED"
            exit 0
          else
            echo "❌ Quality Gate FAILED"
            exit 1
          fi